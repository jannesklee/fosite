/*! \page plotting Plotting & Data Output

There are the following file formats in Fosite:
- [VTK](http://www.vtk.org/) (recommended to use with [ParaView](https://www.paraview.org/))
- Binary (recommended to be used with provided read.py file)
- [XDMF](http://www.xdmf.org) (recommended to use with [VisIt](https://wci.llnl.gov/simulation/computer-codes/visit))

// <!-- ### Plain ASCII output
///
/// The data is written in columns with the coordinates in the first
/// (1D) and second (2D) column followed by the data, i.e. density
/// velocities, etc. depending on the physics module. One line represents
/// one data point. If you carry out 2D simulations the data is sub-devided
/// into blocks with constant x-coordinate. You can write all time steps into
/// one data file setting filecycles=0 (see, e.g., [first setup](first_setup))
/// when calling the InitFileIO subroutine
/// or each time step into its own file (count=[number of data sets],
/// filecycles=[number of data sets + 1]). In the former case the data
/// blocks associated with one time step are separated from the next
/// data set by an additional line feed (two empty lines instead of one).
///
/// You can plot Z against X (and Y) of the ASCII data with gnuplot using
/// the (s)plot command in a way similar to
///
///     (s)plot "datafile.dat" index TIMESTEP with 1:2(:3)
///
/// in case of multiple time steps per data file. TIMESTEP has to be an integer value.
// -->

### XDMF and VTK

The [xdmf file format](http://www.xdmf.org/index.php/XDMF_Model_and_Format)
carries light data in a xml file and can store
heavy data in binary or hdf5 files. This implementation stores the heavy data
in binary files (see the [fileio_binary](fileio_binary.f90) module). These
are exactly the same files, like putting out only the Binary.
XDMF file I/O needs Fortran Stream IO (F2003 standard).

Some convenient programs to display the output data are
[ParaView](http://www.paraview.org/) (for VTK) or [VisIt]
(https://wci.llnl.gov/simulation/computer-codes/visit) (for XDMF).


### Python

It is also possible to read in the binary data directly in Python. This is very
convenient for persons with own manipulation scripts. For this we provide
the file "read.py" in the subdirectory "tools/plot/". The script should be
added to the folder where the plotting routines lie or added to the
[pythonpath](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH).

Below is a minimum example to make a 1D plot:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.py}
from read import read
import matplotlib.pyplot as plt

f = read('dataname.bin')

density = f['/timedisc/density']
x = f['/mesh/bary_centers'][:,:,:,0]

plt.plot(x, density)
plt.show()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To access the right data, the according keys need to be known.
A full list of available keys can be printed out (for the above example) with

    print(f.keys())

Which keys and thus which output is available needs to set in the
initialization file.

The module should run with both Python 2 and Python 3. You are of course also
free to use Python wrappers for [XDMF](http://www.xdmf.org/index.php/Xdmf3_Python_API) or
[VTK](http://www.vtk.org/Wiki/VTK/Wrappers) if you are familiar with this.

### Binary Output Format
#### General Specification

[header],[data],[data],[data],..

#### Header
The header includes all necessary information in 13 bytes of ASCII signs.

|   | magic 	| endian   | version   | real size	 | integer size   | total size |
|---|---------|----------|-----------|-------------|----------------|------------|
| bytes | 6   |  	 2     |     1     |     2       |   		 2        | =13  			 |

These are all ASCII characters except the version, which is single byte
unsigned integer.

#### Data
|   | key length | key | type | data length | data |
|---|------------|-----|------|-------------|------|
| bytes | 4      |  *  |  4   |     *       |  *   |

The *key* has the in *key length* specified size. It then contains,
e.g., /timedisc/density (17 bytes). *type* indicates the type of the
following data (e.g. 4D array) and *data length* includes then 16 bytes
extra for dimensional information (4 bytes per dimension). The existing types
are defined in the [common_dict](common_dict.f90) module.

*/
